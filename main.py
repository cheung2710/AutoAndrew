# documentation: https://docs.google.com/document/d/1MCxDtjRRnO61RX7Chbed5VbXZOBBWARwsXb7EAhrn1U/edit
# TODO: 
# add database with customizations (https://www.youtube.com/watch?v=SPTfmiYiuok)

import time
import discord
import os
import requests
import json
import random
import io
import aiohttp
from keep_alive import keep_alive
from replit import db
from discord.ext import tasks


class ScheduledMessage:
  def __init__(self, hour, minute, content, channel, guild_snowflake):
    self.hour = hour
    self.minute = minute
    self.content = content
    self.channel = channel
    self.guild_snowflake = guild_snowflake


def add_scheduled_message_to_db(sm: ScheduledMessage):
  db["current_message_number"] += 1
  key = db["current_message_number"]
  key = "message" + str(key)
  db[key] = (sm.hour, sm.minute, sm.content, int(sm.channel.id), sm.guild_snowflake)


def clear_all_scheduled_messages():
  messages = db.prefix("message")
  for message in messages:
    del db[message]
  db["current_message_number"] = 1


@tasks.loop(seconds = 60)
async def do_scheduled_messages():
  my_time = get_time()
  for key in db:

    try: 
      is_iterable = db[key][0]
      is_iterable = True
    except TypeError:
      is_iterable = False

    # checks if the hours and minutes match
    if is_iterable and db[key][0] == my_time[0] and db[key][1] == my_time[1]:
      my_channel = get_channel(db[key][3])
      if my_channel is not None:
        await my_channel.send(db[key][2])


def get_channel(channel_id):
  for channel in client.get_all_channels():
    if channel.id == channel_id:
      return channel
  return None


def get_time() -> str:
  my_time = time.gmtime()
  # using Pacific Standard Time for inputs
  hour = str((my_time.tm_hour + 17) % 24)
  if int(hour) < 10:
    hour = "0" + hour
  minute = str(my_time.tm_min)
  if int(minute) < 10:
    minute = "0" + minute

  return hour, minute


client = discord.Client()


command_prefix = 'a!'
bad_words = ['fuck', 'shit', 'bitch']
greetings = ['hello', 'hi', 'greetings', 'hey', 'yo']


def bad_anal_joke(message, name):
  return message.channel.send("I'm flattered, " + name + ", but I'll have to decline.")


async def check_bad_words(message):
  """Sends a message if anyone says a word in the bad_words[] list."""
  for word in bad_words:
      if word in message.content:
        my_author = get_author(message)
        await message.channel.send(my_author + ", watch your fucking language!")


def coinflip():
  if random.choice([0, 1]) == 0: return "heads"
  return "tails"


async def get_inspirobot(message):
  """Sends an image generated by Inspirobot.
  Function body copied from Discord API docs: https://discordpy.readthedocs.io/en/stable/faq.html#how-do-i-upload-an-image"""
  my_url = requests.get('https://inspirobot.me/api?generate=true').text
  async with aiohttp.ClientSession() as session:
    async with session.get(my_url) as resp:
      if resp.status != 200:
          return await message.channel.send('Sorry, I couldn\'t download the file...')
      data = io.BytesIO(await resp.read())
      await message.channel.send(file = discord.File(data, 'inspirobot_image.png'))


async def get_cat(message):
  """Sends an image from TheCatApi."""
  response = requests.get('https://api.thecatapi.com/v1/images/search')
  json_data = json.loads(response.text)
  my_url = json_data[0]['url']
  async with aiohttp.ClientSession() as session:
    async with session.get(my_url) as resp:
      if resp.status != 200:
          return await message.channel.send('Sorry, I couldn\'t download the file...')
      data = io.BytesIO(await resp.read())
      await message.channel.send(file = discord.File(data, 'cat_image.png'))


def get_help():
  return "Here are the coolest commands: \na!cat \na!inspire \na!null \na!roast \na!say \na!shout \n\nHere's a list of all the commands: \nhttps://docs.google.com/document/d/1MCxDtjRRnO61RX7Chbed5VbXZOBBWARwsXb7EAhrn1U/edit?usp=sharing"


def get_author(message):
  my_author = str(message.author)
  my_author = my_author[:len(my_author) - 5]
  return my_author


def get_quote():
  """Returns an inspirational quote from zenquotes.io."""
  response = requests.get('https://zenquotes.io/api/random')
  json_data = json.loads(response.text)
  quote = json_data[0]['q'] + "\n--" + json_data[0]['a']
  return quote


def roast(message):
  """Returns an insult with a name attached from insult.mattbas.org."""
  insult = requests.get('https://insult.mattbas.org/api/insult').text
  my_content = message.content
  if len(my_content) <= 7:
    return insult + "."

  my_content = my_content[7:]
  name = ''
  for char in my_content:
    if char != ' ':
      name += char
  # "a!roast me" will roast the author instead of "Me"
  if name == 'me':
    name = get_author(message)

  if len(name) > 0:
    name = name[0].upper() + name[1:]

  return name + ", you " + insult[4:] + "."


def say(message, s):
  return message.channel.send(s)


def say_hello(message):
    my_author = get_author(message)
    greeting = random.choice(greetings).capitalize()
    return greeting + ', ' + my_author + '!'


def shout(message, s):
  return message.channel.send(s.upper())


@client.event
async def on_ready():
    print('We have logged in as {0.user}'.format(client))
    await client.change_presence(status = discord.Status.online, activity = discord.Game("a!help"))
    do_scheduled_messages.start()


@client.event
async def on_message(message):
  """All of the bot's responses to message events."""
  # ignore all other bots' messages
  if message.author.bot:
    return

  # always check for bad words
  await check_bad_words(message)

  # check for command prefix
  if message.content.startswith(command_prefix):

    if message.content.startswith(command_prefix + 'cat'):
      await get_cat(message)

    elif message.content.startswith(command_prefix + 'coinflip'):
      await message.channel.send(coinflip())

    elif message.content.startswith(command_prefix + 'hello'):
      await message.channel.send(say_hello(message))

    elif message.content.startswith(command_prefix + 'help'):
      await message.channel.send(get_help())

    elif message.content.startswith(command_prefix + 'inspire'):
      await get_inspirobot(message)

    elif message.content.startswith(command_prefix + 'null'):
      await bad_anal_joke(message, get_author(message))

    elif message.content.startswith(command_prefix + 'quote'):
      await message.channel.send(get_quote())

    elif message.content.startswith(command_prefix + 'roast'): 
      await message.channel.send(roast(message))

    elif message.content.startswith(command_prefix + 'say'):
      if len(message.content) > 5:
        await say(message, message.content[5:])

    elif message.content.startswith(command_prefix + 'scheduledmessage'):
      if len(db.prefix("message")) > 10:
        await message.channel.send("Sorry, the maximum number of messages has been reached.")

      else:
        try:
          message_list = message.content.split()
          my_time = message_list[1].split(':')
          hour = my_time[0]
          if int(hour) < 10:
            hour = '0' + hour
          minute = my_time[1]

          my_message = ''
          for word in message_list[2:]:
            my_message += word + ' '
          my_message = my_message.strip()

          sm = ScheduledMessage(hour, minute, my_message, message.channel, message.author.guild.id)
          add_scheduled_message_to_db(sm)
          await message.channel.send("Message logged.")

        except IndexError:
          await message.channel.send("Please type the command like this: \na!scheduledmessage [time in UTC] [message] \nFor example: \na!scheduledmessage 23:30 Pee-pee before slee-pee!")

    elif message.content.startswith(command_prefix + 'shout'):
      if len(message.content) > 7:
        await shout(message, message.content[7:])


keep_alive()
client.run(os.environ['DISCORD_BOT_KEY'])
